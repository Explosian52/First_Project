1) Клиент серверная система "Просмотр истории обращений клиент".
2) Выбрана трехуровневая архитектура

3) Система представляет собой веб интерфейс, через который пользователи могут просматривать историю обращений своих клиентов.
Архитектура имеет три уровня - клиент, сервер приложений и сервер баз данных. 
Выбор архитектуры обусловлен её масштабируемостью (расширение сервера приложений) конфигирируемостью (уровни изолированны друг от друга), небольшой нагрузкой на клиентское приложение, экономностью трафика между сервером-приложений и СУБД.

Компоненты архитектуры:
Клиент - пользовательский интерфейс Web браузер (Слой, отвечающий за авторизацию пользователей, содержит алгоритмы шифрования и выводит задачи и рузультаты в понятном интерфейсе).
Сервер приложений - технологии ADO.NET, ASP.NET и web-серверо IIS.(Бизнес логика, отвечает за получение обращений и формирование их в список, перемещает данные между слоем клиент и сервером баз данных и обратно от сервера базы данных к клиенту).
Сервер баз данных - MySQL-сервер (Хранит историю обращений клиента, обрабатывается в сервере приложений и возвращается в пользовательский интерфейс).

Взаимодействие компонентов:
Браузер клиента-> Сервер IIS-> Исполняющая среда ASP.NET -> Провайдер данных ADO.NET -> Сервер MySQL5-> Провайдер данных ADO.NET -> Исполняющая среда ASP.NET -> Сервер IIS-> Браузер клиента.

1 — браузер клиента отправляет HTTP-запрос;

2 — на стороне сервера служба Web Internet Information Server (web-сервер IIS) определяет тип запрашиваемого ресурса, и для случая запроса *.aspx загружает соответствующее ему расширение Internet Server Aplication Programming Interface (ISAPI). Для страниц aspx это расширение isapi_aspnet.dll. IIS также осуществляет идентификацию и авторизацию пользователя от которого поступил запрос. В свою очередь расширение isapi_aspnet.dll загружает фабрику обработчиков ASP.NET. Далее, фабрика обработчиков создает объектную модель запрашиваемой страницы и обрабатывает действия пользователя.

3 — в ходе генерации ответа приложению ASP.NET может потребоваться обращение к БД, в этом случае используя библиотеки классов провайдера данных ADO.NET, выполняющая среда обращается к серверу БД;

4 — провайдер данных ADO.NET передает запрос на операцию с БД серверу MySQL;

   
5 — сервер MySQL осуществляет обработку запроса, выполняя соответствующие операции с БД;

6 — провайдер данных ADO.NET передает результаты запроса объекту страницы;

7 — объект страницы с учетом полученных данных осуществляет визуализацию графического интерфейса страницы и направляет результаты в выходной поток;

8 — сервер IIS отправляет содержимое сгенерированной страницы клиентскому браузеру

Проблема целостности данных решается тем, что все данные хранятся на сервере без данных, который отслеживает их целостность согласно бизнес-правилам, он не имеет прямого контакта с клиентом. Безопасность обеспечивается разграничиванием прав доступа пользователей за счет идентификации, которые они проходят в процессе авторизации в клиенте. Рядовые пользователи имею право делать только чтение записей. Так же мы установим защиту от угрозы вндрения кода путем фильтрации входящих данных. Если SQL запрос не соответсвует заданным точным возможным параметрам запроса, то система выдаст ошибку и прекратит выполнение скрипта. Так же мы будем использовать защиту от некорректной аутентификации и управлении сессией.Способы защиты: Избегать сессий без кук, избегать посторонних серверных решений для аутентификации, проверять IP, SSL сертификат, вовремя и достаточно часто завершать сессии.
Установим защиту от XSS путем внедрения HTTP заголовков: X-Content-Type-Options: nosniff, X-Content-Type-Options: nosniff
. Strict-Transport-Security: max-age=expireTime.
Защитой от небозопасных прямых ссылок на объекты будет то, что мы не будем предоставлять клиенту прямые ссылки на запросы клиентов, которые хранятся в БД.
От небозопасной конфигурации мы защитимся путем установки актуальной версии ПО, скрытие окон, которые могут показать фрагменты кода, установка разных паролей и частая их замена от разных компонентов системы (MySQL, Бэкенды и т.д).
Защита контроля доступа к функциональному уровню. Закроем адрес админки от случайного подбора.


